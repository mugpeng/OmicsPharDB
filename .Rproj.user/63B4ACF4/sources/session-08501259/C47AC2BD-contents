# Preparation ----
library(shiny)
library(waiter) # wait while running
library(DT)
# library(shinydashboard)
library(config)

# Manipulate data
library(dplyr)
library(data.table)

# Plot
library(UpSetR)
library(ggpubr)
library(plotly)
library(ggrepel)
library(patchwork)

# Multithreads
library(snowfall)

## Debug
# library(reactlog)

# Load ----
config <- config::get(
  # config = "test"
  # Default is production mode
)

## Data----
source("Modules/LoadData.R")

## Modules----
source("Modules/DrugOmicPair.R")
source("Modules/FeatureAcrossType.R")
source("Modules/ProfileDrugSens.R")
source("Modules/FeatureDatabaseSig.R")
source("Modules/StatAnno.R")

# Preprocess ----
source("Script/Preprocess.R")
env <- environment()

# UI ----
ui <- tagList(
  tags$head(
    tags$title("OmicsPharDB (mugpeng@foxmail.com)"),
  ),
  autoWaiter(html = spin_loader(), color = transparent(0.5)),
  navbarPage("OmicsPharDB (mugpeng@foxmail.com)",
             ## Drugs-omics pairs analysis ----
             tabPanel("Drugs-omics pairs Analysis",
                      uiDrugOmicPair("DrugOmicPair")
             ),
             ## Profiles Display ----
             navbarMenu("Profiles Display",
                        ### Features across different types ----
                        tabPanel("Features across different types",
                                 uiFeatureAcrossType("FeatureAcrossType")
                        ),
                        ### Profile of drug sensitivity ----
                        tabPanel("Profile of drug sensitivity",
                                 uiProfileDrugSens("ProfileDrugSens")  
                        ),
             ),
             ## Features database significant analysis ----
             tabPanel("Features database significant analysis",
                      uiFeatureDatabaseSig("FeatureDatabaseSig")
             ),
             ## Statistics and Annotations ----
             tabPanel("Statistics and Annotations",
                      uiStatAnno("StatAnno")
             ),
             ## Contact ----
             tabPanel("Contact",
                      fluidPage(
                        strong("Feel free to talk with me if you find any bugs or have any suggestions. :)"),
                        p(""),
                        p("Email: mugpeng@foxmail.com"),
                        p("github: https://github.com/mugpeng")
                      ))
  )
)


# Server ----
server <- function(input, output, session) {
  # Drugs-omics pairs analysis ----
  callModule(serverDrugOmicPair, "DrugOmicPair")
  # Features across different types ----
  callModule(serverFeatureAcrossType, "FeatureAcrossType")
  # Profile of drug sensitivity ----
  callModule(serverProfileDrugSens, "ProfileDrugSens")
  # Features database significant analysis ----
  callModule(serverFeatureDatabaseSig, "FeatureDatabaseSig")
  # Statistics and Annotations ----
  callModule(serverStatAnno, "StatAnno")
}


# Run ----
shinyApp(ui = ui, server = server)
